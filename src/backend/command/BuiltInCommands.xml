<commands>
	<turtleCommands>
		<command name ="FORWARD" class= "backend.command.turtle.ForwardCommand"/>
		<command name ="FD" class= "backend.command.turtle.ForwardCommand"/>
		<command name ="BACK" class= "backend.command.turtle.BackCommand"/>
		<command name ="BK" class= "backend.command.turtle.BackCommand"/>	
		<command name ="Left" class= "backend.command.turtle.TurnLeftCommand"/>
		<command name ="LT" class= "backend.command.turtle.TurnLeftCommand"/>
		<command name ="Right" class= "backend.command.turtle.TurnRightCommand"/>
		<command name ="RT" class= "backend.command.turtle.TurnRightCommand"/>
		<command name ="SETHEADING" class= "backend.command.turtle.SetHeadingCommand"/>
		<command name ="SETH" class= "backend.command.turtle.SetHeadingCommand"/>
		<command name ="SETXY" class= "backend.command.turtle.SetXYCommand"/>
		<command name ="GOTO" class= "backend.command.turtle.SetXYCommand"/>
		<command name ="PENDOWN" class= "backend.command.turtle.PenDownCommand"/>
		<command name ="PD" class= "backend.command.turtle.PenDownCommand"/>	
		<command name ="PenUp" class= "backend.command.turtle.PenUpCommand"/>
		<command name ="PU" class= "backend.command.turtle.PenUpCommand"/>	
		<command name ="SHOWTURTLE" class= "backend.command.turtle.ShowTurtleCommand"/>
		<command name ="ST" class= "backend.command.turtle.ShowTurtleCommand"/>	
		<command name ="HIDETURTLE" class= "backend.command.turtle.HideTurtleCommand"/>
		<command name ="HT" class= "backend.command.turtle.HideTurtleCommand"/>	
		<command name ="HOME" class= "backend.command.turtle.HomeCommand"/>
		<command name ="CLEARSCREEN" class= "backend.command.turtle.ClearScreenCommand"/>
		<command name ="CS" class= "backend.command.turtle.ClearScreenCommand"/>	
	</turtleCommands>	
	<turtleQueries>
		<command name ="XCOR" class= "backend.command.turtle.XCorQuery"/>		
		<command name ="YCOR" class= "backend.command.turtle.YCorQuery"/>	
		<command name ="HEADING" class= "backend.command.turtle.HeadingQuery"/>			
		<command name ="XCOR" class= "backend.command.turtle.XCorQuery"/>	
		<command name ="PENDOWN?" class= "backend.command.turtle.PenDownQuery"/>
		<command name ="PENDOWNP" class= "backend.command.turtle.PenDownQuery"/>	
		<command name ="SHOWING?" class= "backend.command.turtle.ShowingCommand"/>
		<command name ="SHOWINGP" class= "backend.command.turtle.ShowingCommand"/>
	</turtleQueries>
	<mathOps>
		<command name ="SUM" class= "backend.command.math.SumCommand"/>
		<command name ="+" class= "backend.command.math.SumCommand"/>
		<command name ="DIFFERENCE" class= "backend.command.math.DifferenceCommand"/>
		<command name ="-" class= "backend.command.math.DifferenceCommand"/>
		<command name ="PRODUCT" class= "backend.command.math.ProductCommand"/>
		<command name ="*" class= "backend.command.math.ProductCommand"/>
		<command name ="QUOTIENT" class= "backend.command.math.QuotientCommand"/>
		<command name ="/" class= "backend.command.math.QuotientCommand"/>
		<command name ="REMAINDER" class= "backend.command.math.RemainderCommand"/>
		<command name ="%" class= "backend.command.math.RemainderCommand"/>
		<command name ="MINUS" class= "backend.command.math.MinusCommand"/>
		<command name ="~" class= "backend.command.math.MinusCommand"/>
		<command name ="RANDOM" class= "backend.command.math.RandomCommand"/>
		<command name ="SIN" class= "backend.command.math.SinCommand"/>
		<command name ="COS" class= "backend.command.math.CosCommand"/>
		<command name ="TAN" class= "backend.command.math.TanCommand"/>
		<command name ="ATAN" class= "backend.command.math.ArcTanCommand"/>
		<command name ="LOG" class= "backend.command.math.LogCommand"/>
		<command name ="POW" class= "backend.command.math.PowCommand"/>
	</mathOps>
	<booleanOps>
		<command name ="LESS?" class="backend.command.booleanops.LessThanCommand"/>
		<command name ="LESSP" class="backend.command.booleanops.LessThanCommand"/>
		<command name ="GREATER?" class="backend.command.booleanops.GreaterThanCommand"/>
		<command name ="GREATERP" class="backend.command.booleanops.GreaterThanCommand"/>
		<command name ="EQUAL?" class="backend.command.booleanops.EqualCommand"/>
		<command name ="EQUALP" class="backend.command.booleanops.EqualCommand"/>
		<command name ="NOTEQUAL?" class="backend.command.booleanops.NotEqualCommand"/>
		<command name ="NOTEQUALP" class="backend.command.booleanops.NotEqualCommand"/>
		<command name ="AND" class="backend.command.booleanops.AndCommand"/>
		<command name ="OR" class="backend.command.booleanops.OrCommand"/>
		<command name ="NOT" class="backend.command.booleanops.NotCommand"/>
	</booleanOps>
	<ControlStructs>
		<command name ="REPEAT" class="backend.command.control.RepeatCommand"/>
		<command name ="IF" class="backend.command.control.IfCommand"/>		
		<command name ="IFELSE" class="backend.command.control.IfElseCommand"/>
		<command name ="REPCOUNT" class="backend.command.control.RepcountCommand"/>
		<command name ="[" class="backend.command.Bracket"/>
		<command name ="]" class="backend.command.BracketClose"/>
	</ControlStructs>										
</commands>

